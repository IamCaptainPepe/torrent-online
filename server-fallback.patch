--- a/wtui.js
+++ b/wtui.js
@@ -1,6 +1,7 @@
 #!/usr/bin/env node
 /*  torrent-online — WebTorrent → VLC TUI (ESM) */
 
+import http from 'node:http';
 import fs from 'fs';
 import { promises as fsp } from 'fs';
 import path from 'path';
 import os from 'os';
 import { spawn } from 'child_process';
@@ -70,6 +71,64 @@
   return filtered;
 }
 
+// --- Fallback HTTP server, если у torrent нет createServer() ---
+function contentTypeByExt(ext) {
+  switch (ext) {
+    case '.mp4': return 'video/mp4';
+    case '.m4v': return 'video/x-m4v';
+    case '.mkv': return 'video/x-matroska';
+    case '.mov': return 'video/quicktime';
+    case '.webm': return 'video/webm';
+    case '.avi': return 'video/x-msvideo';
+    case '.mpg':
+    case '.mpeg': return 'video/mpeg';
+    default: return 'application/octet-stream';
+  }
+}
+
+function makeServer(torrent) {
+  if (typeof torrent.createServer === 'function') {
+    return torrent.createServer();
+  }
+  // Свой HTTP-сервер с поддержкой Range
+  return http.createServer((req, res) => {
+    const u = new URL(req.url, 'http://127.0.0.1');
+    if (u.pathname === '/') {
+      res.setHeader('Content-Type', 'text/html; charset=utf-8');
+      const list = torrent.files.map((f, i) =>
+        `<li><a href="/${i}">${f.path}</a></li>`).join('');
+      res.end(`<ul>${list}</ul>`);
+      return;
+    }
+    const idx = Number(u.pathname.slice(1));
+    const file = torrent.files[idx];
+    if (!file) { res.statusCode = 404; res.end('not found'); return; }
+    const total = file.length;
+    res.setHeader('Accept-Ranges', 'bytes');
+    res.setHeader('Content-Type', contentTypeByExt(path.extname(file.name).toLowerCase()));
+    const range = req.headers.range;
+    if (range) {
+      const m = /bytes=(\d+)-(\d+)?/.exec(range);
+      const start = m ? parseInt(m[1], 10) : 0;
+      const end = (m && m[2]) ? parseInt(m[2], 10) : (total - 1);
+      if (start >= total || end >= total || start > end) {
+        res.writeHead(416, { 'Content-Range': `bytes */${total}` });
+        res.end(); return;
+      }
+      res.writeHead(206, {
+        'Content-Range': `bytes ${start}-${end}/${total}`,
+        'Content-Length': end - start + 1
+      });
+      file.createReadStream({ start, end }).pipe(res);
+    } else {
+      res.setHeader('Content-Length', total);
+      file.createReadStream().pipe(res);
+    }
+  });
+}
+
 async function promptSelect(files) {
   const { picked } = await inquirer.prompt([
     { type: 'checkbox', name: 'picked', message: 'Выбери файлы для проигрывания', pageSize: 20, choices: files.map((n, i) => ({ name: n, value: i })) }
@@ -214,7 +273,7 @@
   chosenTorrentIdx.forEach(i => torrent.files[i].select());
 
   // Поднимаем HTTP-сервер для torrent
-  const server = torrent.createServer();
+  const server = makeServer(torrent);
   const port = await listenOnFreePort(server);
 
   // Готовим плейлист из ссылок вида /<index>
